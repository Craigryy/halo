openapi: 3.0.0
info:
  title: Halo 
  version: 1.0.0
  description: API for managing books, users, and categories
servers:
  - url: http://127.0.0.1:5000/
paths:.
  /categories/{id}/books:
    post:
      summary: Add a new book to a category.
      operationId: addBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /categories/{id}/books/{book_id}:
    put:
      summary: Update a book
      operationId: updateBook
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the book to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found

    delete:
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the book to delete
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found

  /users:
    get:
      summary: Get all users
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Add a new user
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      summary: Update a user
      operationId: updateUser
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user to delete
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  /categories:
    get:
      summary: Get all categories
      operationId: getCategories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Add a new category
      operationId: addCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /categories/{id}:
    get:
      summary: Get a category by ID
      operationId: getCategoryById
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the category to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

    put:
      summary: Update a category
      operationId: updateCategory
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

    delete:
      summary: Delete a category
      operationId: deleteCategory
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the category to delete
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found

components:
  schemas:
    ...
    # Existing Book schema here
    ...
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        password:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        created_by:
          type: string
    books:
      type: object
      properties:
        id: 
          type: integer
          readOnly: true
        title: 
          type: String
        author:
          type: String
      